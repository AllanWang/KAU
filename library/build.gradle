apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

group = project.APP_GROUP

android {
    compileSdkVersion Integer.parseInt(project.TARGET_SDK)
    buildToolsVersion project.BUILD_TOOLS

    defaultConfig {
        minSdkVersion Integer.parseInt(project.MIN_SDK)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        consumerProguardFiles 'progress-proguard.txt'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    resourcePrefix "kau_"
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support:support-v4:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support:support-v13:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support:design:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support:preference-v14:${ANDROID_SUPPORT_LIBS}"
    compile "com.android.support.constraint:constraint-layout:${CONSTRAINT_LAYOUT}"

    compile "com.mikepenz:fastadapter:${FAST_ADAPTER}@aar"
    compile "com.mikepenz:fastadapter-commons:${FAST_ADAPTER_COMMONS}@aar"

    compile "com.afollestad.material-dialogs:core:${MATERIAL_DIALOG}"
    compile "com.afollestad.material-dialogs:commons:${MATERIAL_DIALOG}"

    compile "com.mikepenz:iconics-core:${ICONICS}@aar"
    compile "com.mikepenz:google-material-typeface:${IICON_GOOGLE}.original@aar"

    compile "com.jakewharton.timber:timber:${TIMBER}"

    compile "org.jetbrains.anko:anko-commons:${ANKO}"

    compile "io.reactivex.rxjava2:rxkotlin:${RX_JAVA}"
    compile "io.reactivex.rxjava2:rxandroid:${RX_ANDROID}"
    compile "com.jakewharton.rxbinding2:rxbinding-kotlin:${RX_BINDING}"
    compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:${RX_BINDING}"

    compile("com.mikepenz:aboutlibraries:${ABOUT_LIBRARIES}@aar") {
        transitive = true
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}